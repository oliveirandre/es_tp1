1. CREATE DOCKER WITH MySQL

    creates a MySQL running in a container name SoftwareEngineering. 
    The file system will be mapped on local host c:\\tmp\\mysql
            It will create "SoftwareEngineering" database on startup.
            The root password will be "es"
            It will create an user "User" with password "es"
            It will export the port 3307 of the container ( default port on mysql is 3306) 


    -> docker run --name SoftwareEngineering -e MYSQL_ROOT_PASSWORD=es -e MYSQL_DATABASE=SoftwareEngineering -e MYSQL_USER=User -e MYSQL_PASSWORD=es -p 3307:3306 -d mysql:latest

2. ACCESS DATABASE

    -> docker exec -it SoftwareEngineering bash
    -> mysql -u User -p

Don't forget : "use SoftwareEnginnering;" in MySQL bash before any command

3. RUN WITH DOCKER-COMPOSE

    The configurations are in docker-compose.yml
    -> docker-compose up

4. RUN THE PORTAINER

    -> docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer

5. CREATE DOCKER WITH SPOTIFY/KAFKA

    -> docker run -d -p 2181:2181 -p 9092:9092 
        --env ADVERTISED_HOST=kafka 
        --env ADVERTISED_PORT=9092 
        --name kafka spotify/kafka


    ADVERTISTED_HOST was set to kafka, which will allow other containers to be able to run Producers and Consumers.
    Setting ADVERTISED_HOST to localhost, 127.0.0.1, or 0.0.0.0 will work great only if Producers and Consumers are 
    started within the kafka container itself, or if you are using DockerForMac and we want to run Producers and Consumers from OSX. 
    These are far less interesting use cases though, so we'll start Producers and Consumers from other containers.

    We need to use an IP address or hostname in order for the kafka service to be reachable from another container. 
    IP address is not known before the container is started, so we have to choose a hostname, and I chose kafka in this example.

5.1 CREATE A TOPIC
    
    -> docker exec kafka /opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic Weather_Topic

    output:

    Created topic "test".

5.2 LIST TOPICS
    
    -> docker exec kafka /opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh 
        --list 
        --zookeeper localhost:2181

    output:

        test

5.3 Start a producer (in a new terminal window)

    This command will run an unnamed instance of spotify/kafka linked to the kafka service, 
    start a producer, and wait for newline-delimited input until you quit (which destroys the container):

    -> docker run -it 
        --rm 
        --link kafka spotify/kafka /opt/kafka_2.11-0.10.1.0/bin/kafka-console-producer.sh 
        --broker-list kafka:9092 
        --topic test

5.4 Start a consumer (in a new terminal window)

    This command will start an unnamed instance of spotify/kafka linked to the kafka service, 
    start a consumer, display existing messages from the test topic, and wait for new messages 
    until you quit (which destroys the container):

    -> docker run -it 
        --rm 
        --link kafka spotify/kafka /opt/kafka_2.11-0.10.1.0/bin/kafka-console-consumer.sh 
        --bootstrap-server kafka:9092 
        --topic test 
        --from-beginning

5.5 Send messages
    
    Send some newline-delimited messages in the Producer terminal window. The messages appear in the Consumer terminal window.


